generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_TEST")
}

model User {
  id           String   @id @default(cuid())
  name         String
  username     String   @unique
  password     String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  refreshToken String?
}

model Status {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt
  sequence       Int              @unique
  detail         String?
  description    String?
  orders         Order[]
  TimelineStatus TimelineStatus[]
}

model Category {
  id                  String          @id @default(cuid())
  name                String          @unique
  created_at          DateTime        @default(now())
  updated_at          DateTime        @updatedAt
  description         String?
  product_category_id Int
  product_category    ProductCategory @relation(fields: [product_category_id], references: [id], onDelete: Cascade)
  orders              Order[]
}

model Order {
  id             String           @id @db.VarChar(10)
  title          String
  description    String?
  customer_id    String
  status_id      Int
  category_id    String
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt
  down_payment   Int?             @default(0)
  invoice        Int
  payment_type   String?
  payment_data   String?
  completed_at   DateTime?
  adjusted       Boolean          @default(false)
  product_id     String
  category       Category         @relation(fields: [category_id], references: [id], onDelete: Cascade)
  customer       Customer         @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  product        Product          @relation(fields: [product_id], references: [id], onDelete: Cascade)
  status         Status           @relation(fields: [status_id], references: [id], onDelete: Cascade)
  testimoni      Testimoni?
  TimelineStatus TimelineStatus[]
}

model TimelineStatus {
  id          String   @id @default(cuid())
  status_id   Int
  description String?
  sequence    Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  order_id    String   @db.VarChar(10)
  order       Order    @relation(fields: [order_id], references: [id], onDelete: Cascade)
  status      Status   @relation(fields: [status_id], references: [id], onDelete: Cascade)
}

model Customer {
  id           String      @id @default(cuid())
  name         String
  address      String?
  count_orders Int?        @default(0)
  created_at   DateTime    @default(now())
  updated_at   DateTime    @updatedAt
  telegram     String?
  whatsapp     String?     @unique
  email        String?     @unique
  phone        String?     @unique
  balance      Int?        @default(0)
  licenses     License[]
  orders       Order[]
  testimoni    Testimoni[]
  topups       TopUp[]
}

model Testimoni {
  id          String   @id @default(cuid())
  rating      Int      @default(1)
  description String?
  status      Boolean  @default(false)
  order_id    String   @unique @db.VarChar(10)
  customer_id String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  customer    Customer @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  order       Order    @relation(fields: [order_id], references: [id], onDelete: Cascade)
}

model Product {
  id              String          @id @default(cuid())
  name            String
  description     String?
  image           String?
  video           String?
  category_id     Int
  is_active       Boolean         @default(false)
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt
  cloud_public_id String?
  is_deleted      Boolean         @default(false)
  order_id        String?
  price           Int
  order           Order[]
  category        ProductCategory @relation(fields: [category_id], references: [id], onDelete: Cascade)
}

model ProductCategory {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  categories  Category[]
  products    Product[]
}

model License {
  id          String    @id @default(cuid())
  name        String
  description String?
  token       String    @unique
  customer_id String
  usage_limit Int?      @default(0)
  expire_date DateTime?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  used_count  Int?      @default(0)
  customer    Customer  @relation(fields: [customer_id], references: [id], onDelete: Cascade)
}

model TopUp {
  id          String   @id @db.VarChar(8)
  customer_id String
  amount      Int
  description String?
  status      Boolean  @default(false)
  image       String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  customer    Customer @relation(fields: [customer_id], references: [id], onDelete: Cascade)
}

model GameAccount {
  id         String   @id @default(cuid())
  name       String
  email      String?  @unique
  password   String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}
